import os
import io
import tkinter as tk
from tkinter import messagebox
import pandas as pd
import openpyxl
from openpyxl import load_workbook
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
import warnings

# Configurações
SCOPES = ['https://www.googleapis.com/auth/drive.readonly']
SPREADSHEET_IDS = {
    'F': '10_beB24nkw37BsWQaCrS2lrFspcAarA1',
    'M': '1hGsycXU1JM-saNrluhbHumtsxj6vMRFm'
}
RANGES = {
    'F': [
        '2024_Matriculas',
        'EF_Geral_Alfabetica_31122023'
    ],
    'M': [
        '2024_MATRICULAS',
        'EM_Geral_Alfabetica_31122023'
    ]
}

def authenticate():
    creds = None
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file('credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)
        with open('token.json', 'w') as token:
            token.write(creds.to_json())
    return creds

def download_file(service, file_id):
    request = service.files().get_media(fileId=file_id)
    fh = io.BytesIO()
    downloader = MediaIoBaseDownload(fh, request)
    done = False
    while not done:
        status, done = downloader.next_chunk()
        print(f"Download {int(status.progress() * 100)}%.")
    fh.seek(0)
    return fh

def search_passport(passport, service):
    prefix = passport[0]  # 'F' ou 'M'
    file_id = SPREADSHEET_IDS.get(prefix)
    sheet_names = RANGES.get(prefix)

    if not file_id or not sheet_names:
        return "Planilha não encontrada para o formato do passaporte."

    file_handle = download_file(service, file_id)
    
    for sheet_name in sheet_names:
        print(f"Procurando na aba {sheet_name}...")
        # Ignore warnings about date parsing issues
        with warnings.catch_warnings():
            warnings.simplefilter("ignore")
            df = pd.read_excel(file_handle, sheet_name=sheet_name, engine='openpyxl')

        if 'Unnamed: 1' in df.columns:
            passaporte_col = df.columns.get_loc('Unnamed: 1')
            nome_col = df.columns.get_loc('Unnamed: 2')
            ra_col = df.columns.get_loc('Unnamed: 3')
            rg_col = df.columns.get_loc('Unnamed: 4')
            telefone_col = df.columns.get_loc('Unnamed: 5')
            cidade_col = df.columns.get_loc('Unnamed: 6')
            serie_concluida_col = df.columns.get_loc('Unnamed: 9')
            serie_matricular_col = df.columns.get_loc('Unnamed: 10')

            if prefix == 'M':
                prof_disciplina_col = df.columns.get_loc('Unnamed: 23')
                observacao_col = df.columns.get_loc('Unnamed: 34')
            else:  # prefix == 'F'
                prof_disciplina_col = df.columns.get_loc('Unnamed: 18')
                observacao_col = df.columns.get_loc('Unnamed: 25')

            # Limpeza e comparação dos dados
            df.iloc[:, passaporte_col] = df.iloc[:, passaporte_col].astype(str).str.strip()  # Remove espaços extras
            result_row = df[df.iloc[:, passaporte_col] == passport]
            if not result_row.empty:
                # Formata os resultados para exibição
                result = {
                    'Passaporte': result_row.iloc[0, passaporte_col],
                    'Nome': result_row.iloc[0, nome_col],
                    'RA': result_row.iloc[0, ra_col],
                    'RG': result_row.iloc[0, rg_col],
                    'Telefone': result_row.iloc[0, telefone_col],
                    'Cidade': result_row.iloc[0, cidade_col],
                    'Série Concluída': result_row.iloc[0, serie_concluida_col],
                    'Série a ser Matriculado': result_row.iloc[0, serie_matricular_col],
                    'Prof. 1ª Disciplina': result_row.iloc[0, prof_disciplina_col],
                    'Observação': result_row.iloc[0, observacao_col]
                }
                return result

    return "Passaporte não encontrado."

def on_search():
    passport = entry.get()
    if not passport:
        messagebox.showwarning("Entrada inválida", "Informe o passaporte do aluno.")
        return

    creds = authenticate()
    service = build('drive', 'v3', credentials=creds)

    result = search_passport(passport, service)
    
    if isinstance(result, dict):
        messagebox.showinfo("Resultado da Pesquisa", "\n".join([f"{k}: {v}" for k, v in result.items()]))
        
        # Abre a planilha Excel para preenchimento
        wb = load_workbook(filename='Passaporte_Geral_2024.xlsx')
        ws = wb['E Médio']

        # Preenche as células com os dados
        ws['K3'] = result['Passaporte']
        ws['C3'] = result['Nome']
        ws['J4'] = result['RA']
        ws['G4'] = result['RG']
        ws['C6'] = result['Telefone']
        ws['I5'] = result['Cidade']
        ws['D25'] = result['Série Concluída']
        ws['G25'] = result['Série a ser Matriculado']
        ws['D26'] = result['Observação']

        # Salva a planilha preenchida
        wb.save(filename='Passaporte_Geral_2024.xlsx')
        messagebox.showinfo("Sucesso", "Dados preenchidos na planilha com sucesso!")
    else:
        messagebox.showinfo("Resultado da Pesquisa", result)

# Configuração da Interface Tkinter
root = tk.Tk()
root.title("Consulta de Passaporte")

label = tk.Label(root, text="Informe o Passaporte do Aluno:")
label.pack(pady=10)

entry = tk.Entry(root, width=40)
entry.pack(pady=10)

search_button = tk.Button(root, text="Buscar", command=on_search)
search_button.pack(pady=20)

root.mainloop()
